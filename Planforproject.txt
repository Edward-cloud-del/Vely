## üéØ **FRAMESENSE - SLUTGILTIG PLAN**

### **üí° ID√â-SAMMANFATTNING**
En ultrasmidig desktop-app f√∂r Mac d√§r anv√§ndaren trycker **Option+Space**, drar en ruta √∂ver sk√§rminneh√•ll, och f√•r omedelbart AI-svar i overlay. Appen detekterar automatiskt text vs bilder, k√∂r OCR vid behov, och levererar kontextuella AI-insikter utan copy/paste eller f√∂nsterbyte.

---

## üñ•Ô∏è **FRONTEND (React + TypeScript)**

### **Ansvar: Endast AI-resultat & UI**
```typescript
// Frontend hanterar BARA:
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ResultOverlay.tsx        // AI-svar overlay
‚îÇ   ‚îú‚îÄ‚îÄ PermissionWizard.tsx     // Onboarding f√∂r permissions
‚îÇ   ‚îú‚îÄ‚îÄ ProgressIndicator.tsx    // "Analyserar..." feedback
‚îÇ   ‚îî‚îÄ‚îÄ SettingsPanel.tsx        // Hotkey config etc
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useAI.ts                 // OpenAI integration
‚îÇ   ‚îú‚îÄ‚îÄ useSettings.ts           // User preferences
‚îÇ   ‚îî‚îÄ‚îÄ usePermissions.ts        // Permission status
‚îú‚îÄ‚îÄ stores/
‚îÇ   ‚îî‚îÄ‚îÄ app-store.ts             // Zustand state management
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ content-analyzer.ts      // Text vs Image detection
    ‚îî‚îÄ‚îÄ ai-prompts.ts            // Smart AI prompt generation
```

### **Frontend Stack:**
- **React 19** - Moderna hooks & concurrent features
- **TypeScript** - Type safety
- **Zustand** - Lightweight state management  
- **Tailwind CSS** - Utility-first styling
- **Vite** - Fast bundling (via Tauri)

---

## ‚öôÔ∏è **BACKEND (Rust + Tauri)**

### **Ansvar: System-integration & Performance**
```rust
// Backend hanterar ALT systemrelaterat:
src-tauri/src/
‚îú‚îÄ‚îÄ main.rs                      // Tauri app entry point
‚îú‚îÄ‚îÄ overlay/
‚îÇ   ‚îú‚îÄ‚îÄ screen_capture.rs        // Native screenshot (inspirerat av NormCap)
‚îÇ   ‚îú‚îÄ‚îÄ selection_overlay.rs     // Qt-liknande drag-selection
‚îÇ   ‚îî‚îÄ‚îÄ bounds_detection.rs      // Pixel-perfect selection bounds
‚îú‚îÄ‚îÄ ocr/
‚îÇ   ‚îú‚îÄ‚îÄ tesseract_native.rs      // Native Tesseract (200-500ms)
‚îÇ   ‚îî‚îÄ‚îÄ image_preprocessing.rs   // Skala, kontrast, gr√•skala
‚îú‚îÄ‚îÄ system/
‚îÇ   ‚îú‚îÄ‚îÄ permissions.rs           // macOS screen recording permissions
‚îÇ   ‚îú‚îÄ‚îÄ hotkeys.rs              // Global shortcuts (Option+Space)
‚îÇ   ‚îî‚îÄ‚îÄ notifications.rs        // System notifications
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ image_utils.rs          // Bildmanipulation
    ‚îî‚îÄ‚îÄ config.rs               // App configuration
```

### **Backend Stack:**
- **Tauri v2** - Native system access
- **Native Tesseract** - Rust bindings f√∂r snabb OCR
- **screenshots** crate - Cross-platform screen capture
- **global-hotkey** crate - System-wide shortcuts

---

## üîÑ **ARKITEKTUR-FL√ñDE**

### **1. Overlay System (100% Native)**
```rust
// Rust hanterar HELA selection-processen
#[tauri::command]
async fn start_screen_selection() -> SelectionResult {
    // 1. Fullscreen transparent overlay (Qt-stil)
    // 2. Native drag-detection (inga React re-renders)
    // 3. Pixel-perfect bounds calculation
    // 4. Screenshot av valt omr√•de
}
```

### **2. Content Analysis Pipeline**
```typescript
// Frontend orchestrerar AI-analys
const analyzeSelection = async (imageData: ImageData) => {
  // Parallel processing:
  const [ocrResult, hasVisualContent] = await Promise.all([
    invoke('run_native_ocr', { imageData }),      // Rust: 200-500ms
    detectVisualContent(imageData)                // JS: 100ms
  ]);
  
  // Smart routing:
  if (ocrResult.confidence > 80) return processText(ocrResult.text);
  if (hasVisualContent) return processImage(imageData);
  return processHybrid(ocrResult.text, imageData);
};
```

### **3. UI Response System**
```typescript
// React visar bara slutresultat
const ResultOverlay = ({ result, position }) => (
  <div className="absolute bg-white/90 backdrop-blur rounded-lg shadow-lg p-4"
       style={{ left: position.x, top: position.y }}>
    <AIResponse result={result} />
    <QuickActions onCopy={copyText} onShare={shareResult} />
  </div>
);
```

---

## üì¶ **DEPENDENCIES**

### **Rust (Cargo.toml)**
```toml
[dependencies]
tauri = { version = "2.0", features = ["api-all"] }
tesseract = "0.13"                    # Native OCR
screenshots = "0.7"                   # Screen capture  
global-hotkey = "0.4"                # System shortcuts
serde = { version = "1.0", features = ["derive"] }
tokio = { version = "1", features = ["full"] }
image = "0.24"                       # Image processing
```

### **JavaScript (package.json)**
```json
{
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0", 
    "@tauri-apps/api": "^2.0.0",
    "openai": "^4.24.0",
    "zustand": "^4.4.0",
    "clsx": "^2.0.0"
  },
  "devDependencies": {
    "@tauri-apps/cli": "^2.0.0",
    "vite": "^5.0.0",
    "typescript": "^5.0.0",
    "tailwindcss": "^3.4.0",
    "jest": "^29.0.0",
    "playwright": "^1.40.0"
  }
}
```

---

## üõ†Ô∏è **UTVECKLINGSPLAN**

### **Fas 1: Foundation (2 veckor)**
```bash
# Vecka 1: Setup + NormCap-studie
- Klona modern-desktop-app-template
- Studera NormCap overlay-implementation  
- S√§tt upp native Tesseract

# Vecka 2: Core overlay
- Implementera drag-selection i Rust
- Basic screenshot functionality
- Permission-hantering f√∂r macOS
```

### **Fas 2: Smart Features (2-3 veckor)**
```bash
# Vecka 3: OCR + AI integration
- Native Tesseract pipeline
- OpenAI API integration
- Content detection logic

# Vecka 4-5: UI polish + edge cases
- React overlay components
- Error handling & fallbacks
- Hotkey conflict resolution
```

### **Fas 3: Production (2-3 veckor)**
```bash
# Vecka 6-7: Testing + optimization
- E2E test suite (Playwright)
- Performance profiling
- Memory leak testing

# Vecka 8: Distribution
- Code signing setup
- Notarization pipeline (om Apple Developer Account)
- Release automation
```

---

## üéØ **KEY INSIGHTS FR√ÖN DISKUSSION**

### **‚úÖ Smartare Decisions:**
1. **NormCap inspiration** - Proven overlay tech ist√§llet f√∂r fr√•n scratch
2. **Native OCR** - 10x snabbare √§n Tesseract.js
3. **Rust overlay** - Smooth drag utan React lag
4. **Permission fallbacks** - Works utan notarization
5. **Comprehensive testing** - E2E automation f√∂r drag-logic

### **‚ö° Performance Targets:**
- **Overlay response**: <16ms (60fps)
- **OCR processing**: <500ms  
- **AI response**: <3s
- **Memory usage**: <100MB

### **üîê macOS Compatibility:**
- **Permissions**: Elegant wizard + manual fallback
- **Notarization**: Optional men rekommenderat
- **Hotkeys**: Conflict-aware med custom config

---

## üìä **SLUTGILTIG TECH STACK**

| Layer | Technology | Responsibility |
|-------|------------|----------------|
| **UI** | React + TypeScript | AI results, settings, onboarding |
| **System** | Rust + Tauri | Overlay, OCR, permissions, hotkeys |
| **OCR** | Native Tesseract | Text extraction (fast) |
| **AI** | OpenAI GPT-4o-mini | Content analysis |
| **State** | Zustand | Lightweight app state |
| **Testing** | Jest + Playwright | Unit + E2E automation |
| **Build** | Tauri CLI + Vite | Cross-platform bundling |

**Total estimated development time: 6-8 veckor**  
**MVP deployment: 4-5 veckor**

Denna plan kombinerar alla insights fr√•n v√•r diskussion i en konkret, actionable roadmap. üöÄ